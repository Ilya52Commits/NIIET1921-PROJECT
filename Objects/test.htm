<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Thu Feb 02 16:16:57 2023
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; perform_auto_addressing &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Init &rArr; UART_AutoBaudConfig &rArr; RCU_GetUARTClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[48]">ADC_DC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">ADC_DC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[48]">ADC_DC_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[46]">ADC_SEQ0_IRQHandler</a> from vk035_it.o(i.ADC_SEQ0_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[47]">ADC_SEQ1_IRQHandler</a> from vk035_it.o(i.ADC_SEQ1_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[49]">CAN0_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[53]">CAN10_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[54]">CAN11_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[55]">CAN12_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[56]">CAN13_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[57]">CAN14_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[58]">CAN15_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[4a]">CAN1_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[4b]">CAN2_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[4c]">CAN3_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[4d]">CAN4_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[4e]">CAN5_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[4f]">CAN6_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[50]">CAN7_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[51]">CAN8_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[52]">CAN9_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[19]">DMA_CH0_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[23]">DMA_CH10_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[24]">DMA_CH11_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[25]">DMA_CH12_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[26]">DMA_CH13_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[27]">DMA_CH14_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[28]">DMA_CH15_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[1a]">DMA_CH1_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[1b]">DMA_CH2_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[1c]">DMA_CH3_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[1d]">DMA_CH4_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[1e]">DMA_CH5_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[1f]">DMA_CH6_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[20]">DMA_CH7_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[21]">DMA_CH8_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[22]">DMA_CH9_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[39]">ECAP0_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[3a]">ECAP1_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[3b]">ECAP2_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[59]">FPU_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[17]">GPIOA_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[18]">GPIOB_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[38]">I2C_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[16]">MFLASH_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[3d]">PWM0_HD_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[3c]">PWM0_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[3e]">PWM0_TZ_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[40]">PWM1_HD_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[3f]">PWM1_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[41]">PWM1_TZ_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[43]">PWM2_HD_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[42]">PWM2_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[44]">PWM2_TZ_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[45]">QEP_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[15]">RCU_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[35]">SPI_RO_RT_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[36]">SPI_RX_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[37]">SPI_TX_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from vk035_it.o(i.SysTick_Handler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_k1921vk035.o(i.SystemInit) referenced from startup_k1921vk035.o(.text)
 <LI><a href="#[29]">TMR0_IRQHandler</a> from porttimer.o(i.TMR0_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[2a]">TMR1_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[2b]">TMR2_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[2c]">TMR3_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[30]">UART0_E_RT_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[2e]">UART0_RX_IRQHandler</a> from portserial.o(i.UART0_RX_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[2d]">UART0_TD_IRQHandler</a> from portserial.o(i.UART0_TD_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[2f]">UART0_TX_IRQHandler</a> from portserial.o(i.UART0_TX_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[34]">UART1_E_RT_IRQHandler</a> from portserial.o(i.UART1_E_RT_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[32]">UART1_RX_IRQHandler</a> from portserial.o(i.UART1_RX_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[31]">UART1_TD_IRQHandler</a> from portserial.o(i.UART1_TD_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[33]">UART1_TX_IRQHandler</a> from portserial.o(i.UART1_TX_IRQHandler) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[14]">WDT_IRQHandler</a> from startup_k1921vk035.o(.text) referenced from startup_k1921vk035.o(RESET)
 <LI><a href="#[5c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_k1921vk035.o(.text)
 <LI><a href="#[6]">eMBFuncReadCoils</a> from mbfunccoils.o(i.eMBFuncReadCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[9]">eMBFuncReadDiscreteInputs</a> from mbfuncdisc.o(i.eMBFuncReadDiscreteInputs) referenced 2 times from mb.o(.data)
 <LI><a href="#[2]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[1]">eMBFuncReadInputRegister</a> from mbfuncinput.o(i.eMBFuncReadInputRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[5]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[0]">eMBFuncReportSlaveID</a> from mbfuncother.o(i.eMBFuncReportSlaveID) referenced 2 times from mb.o(.data)
 <LI><a href="#[7]">eMBFuncWriteCoil</a> from mbfunccoils.o(i.eMBFuncWriteCoil) referenced 2 times from mb.o(.data)
 <LI><a href="#[4]">eMBFuncWriteHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[8]">eMBFuncWriteMultipleCoils</a> from mbfunccoils.o(i.eMBFuncWriteMultipleCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[3]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[60]">eMBRTUReceive</a> from mbrtu.o(i.eMBRTUReceive) referenced from mb.o(i.eMBInit)
 <LI><a href="#[5f]">eMBRTUSend</a> from mbrtu.o(i.eMBRTUSend) referenced from mb.o(i.eMBInit)
 <LI><a href="#[5d]">eMBRTUStart</a> from mbrtu.o(i.eMBRTUStart) referenced from mb.o(i.eMBInit)
 <LI><a href="#[5e]">eMBRTUStop</a> from mbrtu.o(i.eMBRTUStop) referenced from mb.o(i.eMBInit)
 <LI><a href="#[5a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[61]">vMBPortClose</a> from portother.o(i.vMBPortClose) referenced from mb.o(i.eMBInit)
 <LI><a href="#[62]">xMBRTUReceiveFSM</a> from mbrtu.o(i.xMBRTUReceiveFSM) referenced from mb.o(i.eMBInit)
 <LI><a href="#[64]">xMBRTUTimerT35Expired</a> from mbrtu.o(i.xMBRTUTimerT35Expired) referenced from mb.o(i.eMBInit)
 <LI><a href="#[63]">xMBRTUTransmitFSM</a> from mbrtu.o(i.xMBRTUTransmitFSM) referenced from mb.o(i.eMBInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[65]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ea]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC_DC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_CH10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_CH11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_CH12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_CH13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_CH14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_CH15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA_CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA_CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_CH6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_CH7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA_CH8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA_CH9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ECAP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MFLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PWM0_HD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PWM0_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PWM1_HD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PWM1_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PWM2_HD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PWM2_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>QEP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI_RO_RT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART0_E_RT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_k1921vk035.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_auto_addressing
</UL>

<P><STRONG><a name="[bf]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_auto_addressing
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_user_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_processor
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_to_page
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[95]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_user_data_page
</UL>

<P><STRONG><a name="[66]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>ADC_SEQ0_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, vk035_it.o(i.ADC_SEQ0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SEQ0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_ITStatusClear
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_GetFIFOData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC_SEQ1_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, vk035_it.o(i.ADC_SEQ1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SEQ1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_ITStatusClear
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_GetFIFOData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>ADC_SEQ_Init</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, plib035_adc.o(i.ADC_SEQ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_SEQ_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[8c]"></a>ADC_SEQ_StructInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, plib035_adc.o(i.ADC_SEQ_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[84]"></a>ClkInit</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, system_k1921vk035.o(i.ClkInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[85]"></a>FPUInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_k1921vk035.o(i.FPUInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6d]"></a>GPIO_DriveModeConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, plib035_gpio.o(i.GPIO_DriveModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_DriveModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[6f]"></a>GPIO_InModeConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, plib035_gpio.o(i.GPIO_InModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_InModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[70]"></a>GPIO_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, plib035_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Init &rArr; GPIO_PullModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullModeConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutModeConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InModeConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[71]"></a>GPIO_OutModeConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, plib035_gpio.o(i.GPIO_OutModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_OutModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[72]"></a>GPIO_PullModeConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, plib035_gpio.o(i.GPIO_PullModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PullModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[ce]"></a>GPIO_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, plib035_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[73]"></a>PWM_AQ_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, plib035_pwm.o(i.PWM_AQ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_AQ_Init &rArr; PWM_AQ_ActionBConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AQ_ActionBConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AQ_ActionAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[cd]"></a>PWM_AQ_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, plib035_pwm.o(i.PWM_AQ_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[76]"></a>PWM_CMP_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, plib035_pwm.o(i.PWM_CMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_CMP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CMP_CmpALoadEventConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CMP_CmpADirectLoadCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[cc]"></a>PWM_CMP_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, plib035_pwm.o(i.PWM_CMP_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[cb]"></a>PWM_TB_Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, plib035_pwm.o(i.PWM_TB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWM_TB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[ca]"></a>PWM_TB_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, plib035_pwm.o(i.PWM_TB_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[79]"></a>RCU_GetADCClkFreq</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, plib035_rcu.o(i.RCU_GetADCClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCU_GetADCClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[b0]"></a>RCU_GetOSEClkFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, plib035_rcu.o(i.RCU_GetOSEClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriphClkFreq
</UL>

<P><STRONG><a name="[b1]"></a>RCU_GetOSIClkFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, plib035_rcu.o(i.RCU_GetOSIClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriphClkFreq
</UL>

<P><STRONG><a name="[7c]"></a>RCU_GetPLLClkFreq</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, plib035_rcu.o(i.RCU_GetPLLClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCU_GetPLLClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetPLLDivClkFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriphClkFreq
</UL>

<P><STRONG><a name="[7b]"></a>RCU_GetPLLDivClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, plib035_rcu.o(i.RCU_GetPLLDivClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetPLLClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriphClkFreq
</UL>

<P><STRONG><a name="[7d]"></a>RCU_GetUARTClkFreq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, plib035_rcu.o(i.RCU_GetUARTClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCU_GetUARTClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AutoBaudConfig
</UL>

<P><STRONG><a name="[7e]"></a>RCU_PLL_AutoConfig</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, plib035_rcu.o(i.RCU_PLL_AutoConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RCU_PLL_AutoConfig &rArr; RCU_PLL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_SysClkChangeCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_PLL_StructInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_PLL_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_LatencyConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>RCU_PLL_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, plib035_rcu.o(i.RCU_PLL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCU_PLL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_PLL_OutCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_PLL_AutoConfig
</UL>

<P><STRONG><a name="[7f]"></a>RCU_PLL_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, plib035_rcu.o(i.RCU_PLL_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_PLL_AutoConfig
</UL>

<P><STRONG><a name="[82]"></a>RCU_SysClkChangeCmd</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, plib035_rcu.o(i.RCU_SysClkChangeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCU_SysClkChangeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_PLL_AutoConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, vk035_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, system_k1921vk035.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, system_k1921vk035.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>TMR0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, porttimer.o(i.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>TMR_PeriodConfig</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, plib035_tmr.o(i.TMR_PeriodConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_PeriodConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[2e]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.UART0_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_RX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART0_TD_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, portserial.o(i.UART0_TD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_TD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITStatusClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, portserial.o(i.UART0_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_TX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITStatusClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>UART1_E_RT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, portserial.o(i.UART1_E_RT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UART1_RX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.UART1_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_RX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UART1_TD_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, portserial.o(i.UART1_TD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_TD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITStatusClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART1_TX_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, portserial.o(i.UART1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_TX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITStatusClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_k1921vk035.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>UART_AutoBaudConfig</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, plib035_uart.o(i.UART_AutoBaudConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_AutoBaudConfig &rArr; RCU_GetUARTClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetUARTClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[8a]"></a>UART_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, plib035_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_Init &rArr; UART_AutoBaudConfig &rArr; RCU_GetUARTClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AutoBaudConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[de]"></a>UART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, plib035_uart.o(i.UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[f4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[8b]"></a>adc_init</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, main.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_init &rArr; RCU_GetADCClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetADCClkFreq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_StructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_SetRestartTimer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_ITConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_ITCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>check_user_data_page</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, processor.o(i.check_user_data_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_user_data_page &rArr; MFLASH_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ReadData (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_processor
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>eMBDisable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mb.o(i.eMBDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_auto_addressing
</UL>

<P><STRONG><a name="[b6]"></a>eMBEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_auto_addressing
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>eMBFuncReadCoils</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = eMBFuncReadCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, mbfuncdisc.o(i.eMBFuncReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = eMBFuncReadDiscreteInputs &rArr; eMBRegDiscreteCB &rArr; xMBUtilGetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncinput.o(i.eMBFuncReadInputRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbfuncother.o(i.eMBFuncReportSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mbfunccoils.o(i.eMBFuncWriteCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = eMBFuncWriteCoil &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncWriteMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = eMBFuncWriteMultipleCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>eMBInit</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, mb.o(i.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Init &rArr; UART_AutoBaudConfig &rArr; RCU_GetUARTClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_auto_addressing
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>eMBPoll</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBPoll &rArr; eMBDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBDisable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_fw_update
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_auto_addressing
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>eMBRTUInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mbrtu.o(i.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Init &rArr; UART_AutoBaudConfig &rArr; RCU_GetUARTClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortExitCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[60]"></a>eMBRTUReceive</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortExitCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[5f]"></a>eMBRTUSend</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eMBRTUSend &rArr; xMBRTUTransmitFSM &rArr; vMBPortSerialEnable &rArr; GPIO_Init &rArr; GPIO_PullModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FlagStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortExitCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[5d]"></a>eMBRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eMBRTUStart &rArr; vMBPortSerialEnable &rArr; GPIO_Init &rArr; GPIO_PullModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortExitCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[5e]"></a>eMBRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eMBRTUStop &rArr; vMBPortSerialEnable &rArr; GPIO_Init &rArr; GPIO_PullModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortExitCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[96]"></a>eMBRegCoilsCB</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, mbdefs.o(i.eMBRegCoilsCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[98]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mbdefs.o(i.eMBRegDiscreteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eMBRegDiscreteCB &rArr; xMBUtilGetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[99]"></a>eMBRegHoldingCB</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, mbdefs.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[9a]"></a>eMBRegInputCB</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, mbdefs.o(i.eMBRegInputCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[ae]"></a>erase_updater_page</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fw_updater.o(i.erase_updater_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = erase_updater_page &rArr; MFLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ErasePage (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_fw_update
</UL>

<P><STRONG><a name="[d0]"></a>evaluate_derivative</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, processor.o(i.evaluate_derivative))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solve_polynom
</UL>

<P><STRONG><a name="[cf]"></a>evaluate_p_polynom</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, processor.o(i.evaluate_p_polynom))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solve_polynom
</UL>

<P><STRONG><a name="[b2]"></a>init_processor</STRONG> (Thumb, 516 bytes, Stack size 8 bytes, processor.o(i.init_processor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_processor &rArr; write_user_data_page &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_data_page
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_data_page
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_user_data_page
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 562 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; perform_auto_addressing &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Init &rArr; UART_AutoBaudConfig &rArr; RCU_GetUARTClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_user_data
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_fw_update
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_processor
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_user_data_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_SysClkChangeCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_PLL_AutoConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_analog_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_auto_addressing
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bc]"></a>perform_auto_addressing</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, main.o(i.perform_auto_addressing))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = perform_auto_addressing &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Init &rArr; UART_AutoBaudConfig &rArr; RCU_GetUARTClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBDisable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>perform_fw_update</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, fw_updater.o(i.perform_fw_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = perform_fw_update &rArr; write_buffer_to_page &rArr; MFLASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_new_fw (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_to_page
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_buffer_from_page
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_updater_page
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>polynom_value</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, processor.o(i.polynom_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = polynom_value
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
</UL>

<P><STRONG><a name="[be]"></a>process_analog_output</STRONG> (Thumb, 592 bytes, Stack size 8 bytes, main.o(i.process_analog_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = process_analog_output
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_range
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CMP_SetCmpB
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>process_data</STRONG> (Thumb, 918 bytes, Stack size 12 bytes, processor.o(i.process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = process_data &rArr; polynom_value
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solve_polynom
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;polynom_value
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>prveMBError2Exception</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[b8]"></a>pwm_init</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, main.o(i.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pwm_init &rArr; GPIO_Init &rArr; GPIO_PullModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TB_StructInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TB_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CMP_StructInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CMP_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AQ_StructInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AQ_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_APBRstCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_APBClkCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>read_buffer_from_page</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, fw_updater.o(i.read_buffer_from_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_buffer_from_page &rArr; MFLASH_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ReadData (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_fw_update
</UL>

<P><STRONG><a name="[b3]"></a>read_user_data_page</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, processor.o(i.read_user_data_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_user_data_page &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ReadData (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_processor
</UL>

<P><STRONG><a name="[c4]"></a>set_output_range</STRONG> (Thumb, 378 bytes, Stack size 0 bytes, processor.o(i.set_output_range))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_analog_output
</UL>

<P><STRONG><a name="[c7]"></a>solve_polynom</STRONG> (Thumb, 170 bytes, Stack size 4 bytes, processor.o(i.solve_polynom))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = solve_polynom
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_p_polynom
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_derivative
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
</UL>

<P><STRONG><a name="[b7]"></a>systick_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(i.systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>update_user_data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, processor.o(i.update_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_user_data &rArr; write_user_data_page &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_data_page
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>usMBCRC16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mbcrc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_data_page
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_data_page
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[61]"></a>vMBPortClose</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, portother.o(i.vMBPortClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vMBPortClose &rArr; vMBPortTimerClose
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimerClose
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialClose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[a3]"></a>vMBPortEnterCritical</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, portother.o(i.vMBPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[a6]"></a>vMBPortExitCritical</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, portother.o(i.vMBPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[d1]"></a>vMBPortSerialClose</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, portserial.o(i.vMBPortSerialClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortSerialClose
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortClose
</UL>

<P><STRONG><a name="[a8]"></a>vMBPortSerialEnable</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, portserial.o(i.vMBPortSerialEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vMBPortSerialEnable &rArr; GPIO_Init &rArr; GPIO_PullModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[d2]"></a>vMBPortTimerClose</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimerClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimerClose
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetCounter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ITCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortClose
</UL>

<P><STRONG><a name="[ab]"></a>vMBPortTimersDisable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[aa]"></a>vMBPortTimersEnable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetCounter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ITCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[c1]"></a>write_buffer_to_page</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fw_updater.o(i.write_buffer_to_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_buffer_to_page &rArr; MFLASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_WriteData (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_fw_update
</UL>

<P><STRONG><a name="[b4]"></a>write_user_data_page</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, processor.o(i.write_user_data_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_user_data_page &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_WriteData (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ErasePage (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_user_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_processor
</UL>

<P><STRONG><a name="[a0]"></a>xMBPortEventGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[9e]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[a1]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
</UL>

<P><STRONG><a name="[e0]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[a4]"></a>xMBPortSerialInit</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, portserial.o(i.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xMBPortSerialInit &rArr; UART_Init &rArr; UART_AutoBaudConfig &rArr; RCU_GetUARTClkFreq &rArr; getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[e1]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialPutByte))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[a5]"></a>xMBPortTimersInit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, porttimer.o(i.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xMBPortTimersInit &rArr; TMR_PeriodConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_PeriodConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ITCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[62]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUReceiveFSM &rArr; vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[64]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBRTUTimerT35Expired &rArr; vMBPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[63]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xMBRTUTransmitFSM &rArr; vMBPortSerialEnable &rArr; GPIO_Init &rArr; GPIO_PullModeConfig &rArr; GPIO_ModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FlagStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[ac]"></a>xMBUtilGetBits</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, mbutils.o(i.xMBUtilGetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[ad]"></a>xMBUtilSetBits</STRONG> (Thumb, 96 bytes, Stack size 28 bytes, mbutils.o(i.xMBUtilSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xMBUtilSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[c3]"></a>write_new_fw</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, update_flash_fw.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_new_fw &rArr; MFLASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_WriteData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ReadData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_fw_update (via Veneer)
</UL>

<P><STRONG><a name="[af]"></a>MFLASH_ErasePage</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, plib035_mflash.o(i.MFLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MFLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_SetCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_SetAddr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_BusyStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_new_fw
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_updater_page (via Veneer)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_data_page (via Veneer)
</UL>

<P><STRONG><a name="[94]"></a>MFLASH_ReadData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, plib035_mflash.o(i.MFLASH_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MFLASH_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_SetCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_SetAddr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_BusyStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_new_fw
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_buffer_from_page (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_data_page (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_user_data_page (via Veneer)
</UL>

<P><STRONG><a name="[dd]"></a>MFLASH_WriteData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, plib035_mflash.o(i.MFLASH_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MFLASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_SetCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_SetAddr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_BusyStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_new_fw
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_to_page (via Veneer)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_data_page (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8f]"></a>ADC_SEQ_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.ADC_SEQ_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[91]"></a>ADC_SEQ_ITCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.ADC_SEQ_ITCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[90]"></a>ADC_SEQ_ITConfig</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, main.o(i.ADC_SEQ_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_SEQ_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[8e]"></a>ADC_SEQ_SetRestartTimer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.ADC_SEQ_SetRestartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SEQ_SetRestartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[c5]"></a>PWM_CMP_SetCmpB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.PWM_CMP_SetCmpB))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_analog_output
</UL>

<P><STRONG><a name="[c8]"></a>RCU_APBClkCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.RCU_APBClkCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[c9]"></a>RCU_APBRstCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.RCU_APBRstCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[92]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[bb]"></a>__NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>ADC_SEQ_GetFIFOData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vk035_it.o(i.ADC_SEQ_GetFIFOData))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ1_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ0_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>ADC_SEQ_ITStatusClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vk035_it.o(i.ADC_SEQ_ITStatusClear))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ1_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SEQ0_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>GPIO_ModeConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, plib035_gpio.o(i.GPIO_ModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullModeConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutModeConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InModeConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveModeConfig
</UL>

<P><STRONG><a name="[e4]"></a>MFLASH_BusyStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, plib035_mflash.o(i.MFLASH_BusyStatus))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_WriteData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ReadData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ErasePage
</UL>

<P><STRONG><a name="[e2]"></a>MFLASH_SetAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, plib035_mflash.o(i.MFLASH_SetAddr))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_WriteData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ReadData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ErasePage
</UL>

<P><STRONG><a name="[e3]"></a>MFLASH_SetCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, plib035_mflash.o(i.MFLASH_SetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_WriteData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ReadData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFLASH_ErasePage
</UL>

<P><STRONG><a name="[74]"></a>PWM_AQ_ActionAConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, plib035_pwm.o(i.PWM_AQ_ActionAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_AQ_ActionAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AQ_Init
</UL>

<P><STRONG><a name="[75]"></a>PWM_AQ_ActionBConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, plib035_pwm.o(i.PWM_AQ_ActionBConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_AQ_ActionBConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AQ_Init
</UL>

<P><STRONG><a name="[78]"></a>PWM_CMP_CmpADirectLoadCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, plib035_pwm.o(i.PWM_CMP_CmpADirectLoadCmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CMP_Init
</UL>

<P><STRONG><a name="[77]"></a>PWM_CMP_CmpALoadEventConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, plib035_pwm.o(i.PWM_CMP_CmpALoadEventConfig))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CMP_Init
</UL>

<P><STRONG><a name="[81]"></a>MFLASH_LatencyConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plib035_rcu.o(i.MFLASH_LatencyConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_PLL_AutoConfig
</UL>

<P><STRONG><a name="[83]"></a>RCU_PLL_OutCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plib035_rcu.o(i.RCU_PLL_OutCmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_PLL_Init
</UL>

<P><STRONG><a name="[7a]"></a>getPeriphClkFreq</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, plib035_rcu.o(i.getPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getPeriphClkFreq &rArr; RCU_GetPLLDivClkFreq &rArr; RCU_GetPLLClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetPLLDivClkFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetPLLClkFreq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetOSIClkFreq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetOSEClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetADCClkFreq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCU_GetUARTClkFreq
</UL>

<P><STRONG><a name="[87]"></a>TMR_SetLoad</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, plib035_tmr.o(i.TMR_SetLoad))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_PeriodConfig
</UL>

<P><STRONG><a name="[a9]"></a>UART_FlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mbrtu.o(i.UART_FlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[d3]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, portother.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortEnterCritical
</UL>

<P><STRONG><a name="[d4]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, portother.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortExitCritical
</UL>

<P><STRONG><a name="[d5]"></a>UART_Cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portserial.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialClose
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[88]"></a>UART_ITStatusClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, portserial.o(i.UART_ITStatusClear))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_TX_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_TD_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TD_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, portserial.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[d6]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, portserial.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[df]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, portserial.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[da]"></a>TMR_Cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, porttimer.o(i.TMR_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimerClose
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[d9]"></a>TMR_ITCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, porttimer.o(i.TMR_ITCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimerClose
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[db]"></a>TMR_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, porttimer.o(i.TMR_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimerClose
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[d8]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, porttimer.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimerClose
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[dc]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, porttimer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
